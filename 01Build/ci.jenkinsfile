#!groovy
@Library('jenkinslibrary') _

//func from shared library
def build = new org.devops.build()
//def deployment = new org.devops.deploy()
def tools = new org.devops.tools()
def toemail = new org.devops.toemail()
def sonarq = new org.devops.sonarqube()
//env
String buildType = "${env.Type}"
String buildShell = "${env.buildShell}"
//string hostname="${env.hostname}"
string srcUrl = "${env.srcURL}"
string branchName = "${env.branchName}"

if ("${runOpts}"=="Githubpush"){
   branchName = branch - "refs/heads/"
   currentBuild.description = "Trigger by ${username} ${branch}"
  }



pipeline{
    agent  {node {label "master"}}
    
      stages{
       
       stage("checkOut"){
          steps{
             script{
                
                println("${branchName}")
                tools.PrintMes("Get code","green")
                checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd765b66d-a057-4e24-a23c-bc2ff21c64f8', url: "${srcUrl}"]]])
             }
          }
       }
       stage("build"){
          steps{
            script{
               tools.PrintMes("Build code","green")
               build.Build(buildType,buildShell)
              // deployment.AnsibleDeploy(hostname,"-m ping")
            }
          }
       }
         
         stage("QA"){
            steps{
               script{
                  tools.PrintMes("Scan code","green")
                  sonarq.Sonarscan("demo-maven-service","demo-maven-service","src")
               }
            }
         }
         
       /*stage("mavenbuild"){
          steps{
             script{
             
               mvnHome = tool "m2"
               sh "${mvnHome}/bin/mvn -v"
          
            }
         }
       }
       stage("antbuild"){
           steps{
               script{
                  try{
                     antHome = tool "ant"
                     sh "${antHome}/bin/ant ${buildShell}"
                  } catch(e){
                     println(e)
                  }
                  
               }
           }
         }
       stage("gradlebuild"){
           steps{
               script{
                  gradeHome = tool "GRADLE"
                  sh "${gradeHome}/bin/gradle -v"
               }
           }
         } 
      stage("npmbuild"){
          steps{
              script{
                 npmHome = tool "node"
                 sh "export NODE_HOME=${npmHome} && export PATH=\$NODE_HOME/bin:\$PATH && ${npmHome}/bin/npm -v"
              }
              
          }
         
      } */  
       }
      post{
          always{
              script{
                 println("always")
              }
          }
          success{
              script{
                 println("scuccess")
                 toemail.Email("sucess",userEmail)
              }
          }
          failure{
              script{
                 println("scuccess")
                 toemail.Email("failed",userEmail)
              }
          }
      } 
    }

   
